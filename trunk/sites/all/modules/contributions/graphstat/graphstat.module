<?php
// $Id: graphstat.module,v 1.13 2007/11/14 22:29:56 profix898 Exp $

require_once (drupal_get_path('module', 'graphstat') .'/graphstat_statistics.inc');

/**
 * Implementation of hook_perm().
 */
function graphstat_perm() {
  return array('access graphs');
}

/**
 * Implementation of hook_theme().
 */
function graphstat_theme() {
  return array(
    'graphstat_filter_form' => array(
      'arguments' => array('form' => NULL),
    ),
    'graphstat_graph' => array(
      'arguments' => array('url' => NULL, 'title' => '', 'description' => '', 'attributes' => array()),
    )
  );
}

/**
 * Implementation of hook_init().
 */
function graphstat_init() {
  drupal_add_css(drupal_get_path('module', 'graphstat') .'/graphstat.css');
}

/**
 * Implementation of hook_menu().
 */
function graphstat_menu() {
  $items = array();
  $items['admin/reports/graphs'] = array(
    'title' => 'Graphs',
    'description' => 'Displays graphs based on site statistics.',
    'access callback' => 'user_access',
    'access arguments' => array('access graphs'),
    'page callback' => 'graphstat_graphs',
    'page arguments' => array('history'),
    'weight' => 11
  );
  $graphs = module_invoke_all('graphstat');
  foreach ($graphs as $group => $graph) {
    $items['admin/reports/graphs/'. strtr($group, ' ', '_')] = array(
      'title' => check_plain(isset($graph['title']) ? $graph['title'] : drupal_ucfirst($group)),
      'access callback' => 'user_access',
      'access arguments' => array('access graphs'),
      'page callback' => 'graphstat_graphs',
      'page arguments' => array($group),
      'type' => ($group == 'history') ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK
    );
    foreach (array_keys($graph) as $key) {
      $items['graphstat/'. strtr($group .'_'. $key, ' ', '_')] = array(
        'access callback' => 'user_access',
        'access arguments' => array('access graphs'),
        'page callback' => 'graphstat_render_graph',
        'page arguments' => array($group, $key),
        'type' => MENU_CALLBACK
      );
    }
  }
  
  return $items;
}

/**
 * Function graphstat_graphs().
 * (menu callback: page containing multiple graphs)
 */
function graphstat_graphs($group = NULL) {
  $graphs = module_invoke_all('graphstat');
  
  if ($group && isset($graphs[$group])) {
    $graphs = $graphs[$group];
    $output = isset($graphs['pre']) ? $graphs['pre'] : '';
    // If this graph group defines a filter callback then add the filter form
    if (isset($graphs['filter'])) {
      $options = $graphs['filter']['options'];
      $filter = isset($_SESSION['graphstat_filter'][$group]) ? $_SESSION['graphstat_filter'][$group] : NULL;
      if (isset($_POST['graphstat_filter_select'])) {
        $filter = $_POST['graphstat_filter_select'];
        $_SESSION['graphstat_filter'][$group] = $filter;
      }
      $output .= drupal_get_form('graphstat_filter_form', $options, $filter);
    }
    // Loop over the graphs for this graph group
    foreach($graphs as $key => $graph) {
      if (is_array($graph) && isset($graph['data']) && is_array($graph['data'])) {
        $url = url('graphstat/'. strtr($group .'_'. $key, ' ', '_'), array('absolute' => TRUE));
        $title = isset($graph['title']) ? $graph['title'] : drupal_ucfirst($group);
        $description = isset($graph['description']) ? $graph['description'] : '';
        $output .= theme('graphstat_graph', $url, $title, $description);
      }
    }
    $output .= isset($graphs['post']) ? $graphs['post'] : '';
    $output .= drupal_get_form('graphstat_size_form');
  }
  else {
    $output = t('There are no graphs available for this group.');
  }
  
  return $output;
}

/**
 * Function graphstat_filter_form().
 */
function graphstat_filter_form($form_state, $options, $default = NULL) {
  $form = array('#attributes' => array('class' => 'graphstat-filter-form'));
  $form['graphstat_filter_select'] = array(
    '#type' => 'select',
    '#default_value' => $default ? $default : $options[0],
    '#options' => $options
  );
  $form['graphstat_filter_submit'] = array('#type' => 'submit', '#value' => t('Show'));
  
  return $form;
}

/**
 * Function theme_graphstat_filter_form().
 */
function theme_graphstat_filter_form($form) {
  $rows[] = array(
    drupal_render($form['graphstat_filter_select']),
    drupal_render($form['graphstat_filter_submit'])
  );
  
  return theme('table', array(), $rows, array('width' => '250px'));
}

/**
 * Function graphstat_size_form().
 * (add buttons to change (larger/default/smaller) the size of the graphs)
 */
function graphstat_size_form($form_state) {
  $form = array('#attributes' => array('class' => 'graphstat-size-form'));
  $form['graphstat_size_larger'] = array('#type' => 'submit', '#value' => t('Larger graphs'));
  $form['graphstat_size_default'] = array('#type' => 'submit', '#value' => t('Default'));
  $form['graphstat_size_smaller'] = array('#type' => 'submit', '#value' => t('Smaller graphs'));

  return $form;
}

/**
 * Function graphstat_size_form_submit().
 */
function graphstat_size_form_submit($form, &$form_state) {
  if (isset($form_state['values']['op'])) {
    global $user;
    $cid = 'graphstat:'. $user->uid;
    $cache = cache_get($cid);
    $data['width'] = $cache ? $cache->data['width'] : 500;
    $data['height'] = $cache ? $cache->data['height'] : 300;
    switch ($form_state['values']['op']) {
      case t('Larger graphs'):
        $data['width'] += 100;
        $data['height'] += 60;
        break;
      case t('Smaller graphs'):
        $data['width'] -= 100;
        $data['height'] -= 60;
        break;
      default:
        $data['width'] = 500;
        $data['height'] = 300;
    }
    cache_set($cid, $data, 'cache', CACHE_PERMANENT);
  }
}

/**
 * Function theme_graphstat_graph().
 * (format a single graph with title, description, ...)
 */
function theme_graphstat_graph($url, $title = '', $description = '', $attributes = array()) {
  global $user;
  $cache = cache_get('graphstat:'. $user->uid);
  $attributes['width'] = $cache ? $cache->data['width'] : 500;
  $attributes['height'] = $cache ? $cache->data['height'] : 300;
  $attributes['alt'] = isset($attributes['alt']) ? $attributes['alt'] : check_plain($title);
   
  $output  = '<div class="graphstat-container">';
  $output .= '<div class="graphstat-image">';
  $output .= '<img src="'. check_url($url) .'" title="'. check_plain($title) .'" '. drupal_attributes($attributes) .' />';
  $output .= '</div>';
  if (!empty($description)) {
    $output .= '<div class="description graphstat-legend">';
    $output .= check_plain($description);
    $output .= '</div>';
  }
  $output .= '</div>';
  
  return $output;
}

/**
 * Function graphstat_render_graph().
 * (function to render the actual graph .png images)
 */
function graphstat_render_graph($group, $key) {
  global $user;
  drupal_set_header('Content-type: image/png');
  
  $filter = isset($_SESSION['graphstat_filter'][$group]) ? $_SESSION['graphstat_filter'][$group] : NULL;
  $cache = cache_get('graphstat:'. $user->uid);
  $width = $cache ? $cache->data['width'] : 500;
  $height = $cache ? $cache->data['height'] : 300;
  $time = format_date(time(), 'custom', 'H');
  
  $cid = 'graphstat:'. md5($group . $key . $filter) .':'. $width .':'. $time;
  if ($cache = cache_get($cid)) {
    $image = $cache->data;
  }
  else {
    // Cache Miss: we need to generate the graphs from scratch
    $graphs = module_invoke_all('graphstat');
    $graphs = $graphs[$group];
    // If a filter is defined then invoke the callback function
    // to fetch the filtered graph data
    if (isset($graphs['filter'])) {
      $function = $graphs['filter']['callback'];
      if (function_exists($function)) {
        $function($graphs, $filter);
      }
    }
    $graph = $graphs[$key];
    // If no graph data available then render a placeholder image
    if (empty($graph['data'])) {
      if (function_exists('imagepng')) {
        $img = imagecreate($width, $height);
        imagefill($img, 0, 0, imagecolorallocate($img, 240, 240, 240));
        imageline($img, 0, 0, $width, $height, imagecolorallocate($img, 128, 128, 128));
        imageline($img, 0, $height, $width, 0, imagecolorallocate($img, 128, 128, 128));
        imagepng($img);
        imagedestroy($img);
      }
      exit();
    }
    // Include the PHPLOT library
    require_once (drupal_get_path('module', 'graphstat') .'/phplot.php');
    // Create instance of PHPLOT and configure graph paramters
    $plot =& new PHPlot($width, $height);
    $graph['type'] = isset($graph['type']) ? $graph['type'] : 'linepoints';
    $plot->SetPlotType($graph['type']);
    $plot->SetTitle(isset($graph['title']) ? $graph['title'] : '');
    $plot->SetXTitle(isset($graph['xlabel']) ? $graph['xlabel'] : '');
    $plot->SetXTickLabelPos('none');
    $plot->SetYTitle(isset($graph['ylabel']) ? $graph['ylabel'] : '');
    $plot->SetXLabelAngle(90);
    if (isset($graph['legend'])) {
      $plot->SetLegend($graph['legend']);
    }
    // Push graph data into the plot renderer
    $data = array();
    if (is_array(current($graph['data']))) {
      $data = $graph['data'];
    }
    else {
      foreach ($graph['data'] as $x => $y) {
        $data[] = array($x, $y);
      }
    }
    $plot->SetDataValues($data);
    // Draw the graph into a buffer $image
    ob_start();
    $plot->DrawGraph();
    $image = ob_get_contents();
    ob_end_clean();
    // Put $image into the cache
    cache_set($cid, $image, 'cache', CACHE_TEMPORARY);
  }
  
  // Print out the image and make sure to exit immediatly
  print $image;
  exit();
}
