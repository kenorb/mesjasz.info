<?php
// $Id: links_weblink.module,v 1.26.2.3 2009/01/21 04:16:33 syscrusher Exp $

/*
 * links_weblink defines a "weblink" node type, for backward compatibility
 * with the weblink.module by Ber Kessels. Much of the code in this new
 * module is based on Ber's previous work.
 */

/**
 * Implementation of hook_help()
 */
function links_weblink_help($path, $arg) {
  switch($path) {
    case 'admin/help#links_weblink':
      return t("<p>This module is used to create links to other resources -- websites, pages, documents, etc. Each click on an outgoing link is logged and counted.</p>");
  }
}

/**
 * Implementation of hook_node_info()
 */
function links_weblink_node_info() {
  return array(
    'weblink' => array(
      'name' => t('weblink'),
      'module' => 'links_weblink',
      'has_title' => TRUE,
      'has_body' => TRUE,
      'description' => t("A weblink is an article whose main purpose is to catalog a link into a directory, as distinguished from an article of some other type that may or may not have related links. It is possible that a weblink article may <i>also</i> have related links (depending on administrative settings for this site), but the weblink's primary link is a required field that is separate from the optional related links (if any)."),
    ),
  );
}

/**
 * Implementation of hook_menu()
 */
function links_weblink_menu() {
  $items = array();
  if (variable_get('links_weblink_enable_catalog', 1)) {
    $items['links/weblink'] = array(
      'title' => t('weblinks'),
      'page callback' => 'links_weblink_page',
      'access callback' => 'user_access',
      'access arguments' => array('view weblinks'),
    );
  }
  $items['admin/settings/links/links_weblink'] = array(
    'title' => t('weblinks module'),
    'description' => t('Configure settings for the weblink content type.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('links_weblink_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_theme to register our theme functions
 */
function links_weblink_theme($existing, $type, $theme, $path) {
  return array(
    'links_weblink_page_form' => array(
      'arguments' => array('element' => NULL),
    ),
    'links_weblink_category' => array(
      'arguments' => array('element' => NULL),
    ),
    'links_weblink_category_children' => array(
      'arguments' => array('element' => NULL),
    ),
    'links_weblink_append' => array(
      'arguments' => array('link' => NULL),
    ),
  );
}

/**
 * Hook from links_admin to declare that deleting the main link from this
 * node requires the node to be deleted as well.
 */
function links_weblink_links_admin_link_required() {
  // The format is node_type => module_name
  return array('weblink'=>'links_weblink');
}

function links_weblink_page_form() {
  drupal_add_css(drupal_get_path('module', 'links') .'/links_weblink.css', 'module');
  $form = array();
  $form['#theme'] = 'links_weblink_page_form';

  // This array will hold the level we are showing
  // as $tid => $name
  $terms = array();
  $args = explode(',',arg(2));
  foreach ($args as $i=>$term) {
    if (intval($term)) {
      $tid = intval($term);
      $term = taxonomy_get_term($tid);
      $terms[$tid] = $term->name;
    }
  }
  if (count($terms)) {
    $top_level = false;
  } else {
    $top_level = true;
    // Go get all the top-level terms for applicable vocabs
    $vocabs = taxonomy_get_vocabularies('weblink');
    // If no vocabs are defined, we can't go any further, so abort out
    // with an administrator warning.
    if (! count($vocabs)) {
      $vars = array();
      $msg = "No categories are defined for the weblink module.";
      if (user_access('administer taxonomy')) {
        $vars['!admin_link'] = l(t('category administration'),'admin/content/taxonomy');
        $msg .= " (go to !admin_link)";
      }
      $form['message'] = array(
        '#type'=>'markup',
        '#value'=>t($msg, $vars),
      );
      watchdog('links', $msg, $vars, WATCHDOG_WARNING, l(t('administer'), 'admin/content/taxonomy'));
      return $form;
    }
    foreach ($vocabs as $vocab) {
      $tree = taxonomy_get_tree($vocab->vid, 0, -1, 1);
      foreach ($tree as $term) {
        $terms[$term->tid] = $term->name;
      }
    }
  }

  // At this point, the array $terms contains $tid=>$name for all of the
  // terms at the current level. For the top level, it will often have
  // multiple elements. For lower levels, typically only one unless the
  // search specified a comma-separated list in the URL, e.g.,
  // path "links/weblink/2,5,7" .

  $all_parents = array();
  $weight = 0;
  foreach ($terms as $tid=>$name) {
    $element = array('#tree'=>true, '#theme'=>'links_weblink_category', '#weight'=>$weight++);
//    $element = array('#tree'=>true, '#weight'=>$weight++);
    $element['term'] = array(
      '#type' => 'markup',
      '#tree' => true,
      '#value' => l($name, 'links/weblink/'.$tid),
    );
    $term_nodes[$tid] = array();
    $result = db_query("SELECT n.nid, n.title FROM {node} n, {term_node} tn WHERE n.nid=tn.tid AND tn.tid=%d AND n.type='weblink' AND n.status=1 ORDER BY n.title", $tid); 
    while ($node = db_fetch_object($result)) {
      $term_nodes[$tid][] = $node;
    }
    $children = taxonomy_get_children($tid);
    $element['children'] = array(
      '#theme' => 'links_weblink_category_children',
      '#tree' => true,
    );
    $weight2 = 0;
    foreach ($children as $child) {
      $element['children'][] = array(
        '#type' => 'markup',
        '#value' => l($child->name, 'links/weblink/'.$child->tid),
        '#weight' => $weight2++,
        '#prefix' => '<li class="links_weblink_category_child">',
        '#suffix' => '</li>',
      );
    }
    $parents = taxonomy_get_parents($tid);
    foreach ($parents as $parent) {
      $all_parents[$parent->tid] = l($parent->name, 'links/weblink/'.$parent->tid);
    }
    $form[$tid] = $element;
  }

  if ($top_level) {
    $title = t('Weblinks: Main Page');
  } else {
    $title = t('Weblinks: %topics', array('%topics'=>implode(', ',$terms)));
    $breadcrumbs = drupal_get_breadcrumb();
    $breadcrumbs[] = l(t('Weblinks top level'), 'links/weblink');
    if (count($all_parents)) {
      $breadcrumbs[] = implode(', ', $all_parents);
    }
    drupal_set_breadcrumb($breadcrumbs);
  }
  drupal_set_title($title);

  // List the nodes at the current level
  
  $terms_to_list = array();
  if(variable_get('links_weblink_catalog_show_child_category_links','1')) {
    $terms_to_list = $terms;
    if (!$top_level) {
      $terms_to_list += $children;
    }
  } else {
    if (!$top_level)
      $terms_to_list[$tid] = $term;   
  }
  
  $form['nodes'] = array(
    '#tree' => true,
  );
  $i = 0;
  if (count($terms_to_list)) {
    $sql = "SELECT DISTINCT n.nid, n.title FROM {node} n, {term_node} tn WHERE n.nid=tn.nid AND tn.tid IN (%s) AND n.type='weblink' AND n.status=1 ORDER BY n.title";
    $result = db_query($sql, implode(',', array_keys($terms_to_list)));
    while ($node = db_fetch_object($result)) {
      $node_html = node_view(node_load($node->nid), true, false, true);
      $form['nodes'][$i++] = array(
        '#type' => 'markup',
        '#value' => $node_html,
      );
    }
  } else {
    $html .= t("<p>There are no weblinks defined at this level of the category tree.</p>\n");
  }

  return $form;
}

/**
 * Display a view of the weblinks
 * URL format
 *       q=links/weblink
 *   or  q=links/weblink/$term1,$term2,....
 * where $term1, $term2, etc. are integer ID numbers
 *
 * In the default (first) form, the module will show all
 * top-level terms from all vocabularies applicable to
 * weblink node types and will generate links that point
 * to the second form for each term.
 *
 * In the second form, the module will show terms as
 * indicated. An internal navigation link will be
 * created to any applicable parent terms, if the
 * vocabularies allow nesting, and to the default
 * top-level display as well.
 */
function links_weblink_page() {
  $html = "";
  $html .= drupal_get_form('links_weblink_page_form');
  return $html;
}

function theme_links_weblink_category_children($children) {
  $kids = "";
  foreach ($children as $i=>$kid) {
    if (is_int($i)) {
      $kids .= drupal_render($kid);
    }
  }
  $output = '<ul class="links_weblink_category_children">';
  $output .= $kids;
  $output .= '</ul>';
  return $output;
}

function theme_links_weblink_category($element) {
//print("_category<br>");
  $output = '<div class="links_weblink_category">';
  $output .= '<div class="links_weblink_category_parent">' . drupal_render($element['term']) . '</div>';
  if (count($element['children'])) {
    $output .= drupal_render($element['children']);
  }
  $output .= '</div>';
  return $output;
}

function theme_links_weblink_page_form($form) {
  // First, check for a message. If that's set, then nothing else applies.
  if (is_array($form['message'])) {
    return drupal_render($form['message']);
  }
  $columns = variable_get('links_weblink_catalog_category_cols','2');
  $table = array();

  // Current column (0, 1,...$columns-1)
  $col = 0;
  $row = 0;

  $output .= '<h3 class="links_weblink_section">' . t('Categories') . '</h3>';
  foreach ($form as $i=>$element) {
    if (is_int($i)) {
      if (! is_array($table[$row])) {
        $table[$row] = array();
        $table[$row]['data'] = array();
      }
      $table[$row]['data'][$col++] = drupal_render($element);
      if ($col >= $columns) {
        $col = 0;
        $row++;
      }
    }
  }
  // Finish out a row
  while ($col < $columns) {
    $table[$row]['data'][$col++] = '';
  }
  // Apply row attributes
  foreach (array_keys($table) as $i) {
    $table[$i]['class'] = 'links_weblink_category_row';
    $table[$i]['valign'] = 'top';   // STUB for testing without CSS file
  }
  $output .= theme('table',NULL,$table);
  // Add the links at this level and (optionally) child level
  $node_html = '';
  if (is_array($form['nodes']) && count($form['nodes']) > 0) {
    foreach ($form['nodes'] as $i=>$element) {
      if (is_int($i)) {
        $node_html .= '<p>' . drupal_render($element);
      }
    }
  }
  if ($node_html != '') {
    $output .= '<h3 class="links_weblink_section">' . t('Links') . '</h3>';
    $output .= $node_html;
  } else {
    $output .= '<p>' . t('(No links in this category)') . '</p>';
  }
  return $output;
}

/**
 * Exposes the needed permissions for this node type
 */
function links_weblink_perm() {
  return array('create weblinks', 'view weblinks', 'edit own weblinks');
}

/**
 * Implementation of hook_settings()
 */
function links_weblink_settings_form() {
  $form = array();
  if (!module_exists('links')) {
    drupal_set_message(t('The &quot;links&quot; module is disabled or not installed. Weblinks will not function until this is corrected. Check the availability of
that module, and enable if needed, in the %modules.',array('%modules'=>l(t('modules administration page'),'admin/modules'))),'error');
  }

  $form['link_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Link display settings'),
    '#description' => t("Other settings for how weblinks behave and how they are displayed are available in the !linksettingspage.", array('!linksettingspage'=>l(t('links module settings page'),'admin/settings/links'))),
  );

  $form['link_settings']['links_weblink_display_teaser'] = array(
    '#type' => 'radios',
    '#title' => t('Link display for teaser view'),
    '#default_value' => variable_get('links_weblink_display_teaser','1'),
    '#options' => array(0=>t('Do not display link'), 1=>t('Display link')),
    '#description' => t('This setting controls whether the clickable link is displayed near the node title (in most themes) for the teaser or listing format.'),
  );

  $form['link_settings']['links_weblink_display_full'] = array(
    '#type' => 'radios',
    '#title' => t('Link display for full-page view'),
    '#default_value' => variable_get('links_weblink_display_full','1'),
    '#options' => array(0=>t('Do not display link'), 1=>t('Display link')),
    '#description' => t('This setting controls how many links are displayed near the node title (in most themes) in full-page displays.'),
  );

  $form['link_settings']['links_weblink_display_length'] = array(
    '#type' => 'select',
    '#title' => t('Display trim length'),
    '#default_value' => variable_get('links_weblink_display_length','0'),
    '#options' => array(0=>t('Unlimited'), 20=>20, 30=>30, 40=>40),
    '#description' => t('Trims the displayed text (but not the actual URL) when the clickable link is displayed near the article title. Does not affect display of the link at the end of the article body.'),
  );

  $form['link_settings']['links_weblink_enable_list'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show link at end of body text'),
    '#return_value' => 1,
    '#default_value' => variable_get('links_weblink_enable_list','1'),
    '#description' => t('If enabled, the clickable link will be appended to the end of the content, when in full-page display mode.'),
  );

  $form['link_settings']['links_weblink_teaser_direct_clickthrough'] = array(
    '#type' => 'checkbox',
    '#title' => t('Weblink node titles go to destination page'),
    '#return_value' => 1,
    '#default_value' => variable_get('links_weblink_teaser_direct_clickthrough', FALSE),
    '#description' => t('If enabled, then weblink nodes displayed in teaser mode (such as on the default home page) will have their titles linked to the destination URL, rather than going to a full-page view of the weblink node. Note that this means users can never see the body of a weblink node, only the teaser. The &quot;read more&quot; link (typically smaller than the title link) is not altered by this option.'),
  );

  $form['link_catalog'] = array(
    '#type' => 'fieldset',
    '#title' => t('Weblink catalog settings'),
  );

  $form['link_catalog']['links_weblink_enable_catalog'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable weblinks directory'),
    '#return_value' => 1,
    '#default_value' => variable_get('links_weblink_enable_catalog','1'),
    '#description' => t('If enabled, this module will produce a directory of all weblink nodes, organized by category.'),
  );

  $form['link_catalog']['links_weblink_catalog_category_cols'] = array(
    '#type' => 'select',
    '#title' => t('Category display columns'),
    '#default_value' => variable_get('links_weblink_catalog_category_cols','2'),
    '#options' => array(1=>1, 2=>2, 3=>3, 4=>4, 5=>5),
    '#description' => t('If the weblink catalog is enabled, this setting controls the number of columns in the table of catagories that appears at the top of link catalog pages.'),
  );
  
  $form['link_catalog']['links_weblink_catalog_show_child_category_links'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show links in child categories'),
    '#return_value' => 1,
    '#default_value' => variable_get('links_weblink_catalog_show_child_category_links','1'),
    '#description' => t('If enabled, the weblink catalog will list weblinks in both the selected category and its children (if the vocabulary in use is hierarchical).'),
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_form
 */
function links_weblink_form(&$node) {

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#description' => t("Textual description of the weblink"),
    '#weight' => -18,
  );

  $form['links_weblink_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Link URL'),
    '#maxlength' => 512,
    '#default_value' => $node->links_weblink_url,
    '#required' => TRUE,
    '#description' => t('Link URL, either local or remote. The URL will be normalized to remove things like session identifiers, which are not a permanent part of the link address.'),
    '#weight' => -17,
  );

  $form['body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => $node->body,
    '#required' => FALSE,
    '#weight' => -16,
  );

  $form['format'] = filter_form($node->format);
  return $form;
}

/**
 * Implementation of hook_load
 */
function links_weblink_load($node) {
  $links = links_load_links_for_node($node->nid, 'links_weblink', 0, TRUE);
  return array('links_weblink_url'=>$links[0]['url'], 'links_weblink'=>$links);
}

/**
 * Implementation of hook_prepare().
 */
function links_weblink_prepare(&$node) {
  if (isset($_POST['links_weblink_url'])) {
    $node->links_weblink_url = $_POST['links_weblink_url'];
  }
  links_weblink_node_build($node);
}

/**
 * Implementation of hook_validate().
 */
function links_weblink_validate(&$node) {
  links_weblink_node_build($node);
}

/**
 * Implementation of hook_delete().
 */
function links_weblink_delete(&$node) {
  // Delete the values from a node that is being erased
  // Don't care if it's "supposed" to have links -- delete if found anyway
  links_weblink_node_build($node);
  links_delete_links_for_node($node, 'links_weblink');
}

/**
 * Implementation of hook_insert().
 */
function links_weblink_insert(&$node) {
  links_weblink_node_build($node);
  links_save_links_for_node($node, 'links_weblink');
}

/**
 * Implementation of hook_update().
 */
function links_weblink_update(&$node) {
  links_weblink_node_build($node);
  links_save_links_for_node($node, 'links_weblink');
}

/**
 * Implementation of hook_link().
 */
function links_weblink_link($type='', $node=NULL, $teaser=FALSE) {
  // Only node links supported here
  if ($type != 'node') {
    return array();
  }
  $list = links_get_list('links_weblink', $node, FALSE, $teaser, FALSE);
  if (count($list) > 0) {
    $links['links_weblink'] = $list[0];
    return $links;
  }
}

/**
 * Implementation of hook_nodeapi(). In this case, we offer the
 * administrator-controlled option to have weblink nodes' titles
 * in teaser mode go directly to the destination page, possibly
 * by way of the "goto" path that tracks click-through counts.
 */
function links_weblink_preprocess_node(&$variables) {
  $node = $variables['node'];
  if ($node->type == 'weblink' && variable_get('links_weblink_teaser_direct_clickthrough', FALSE)) {
    $link = $node->links_weblink[0];
    $link_url =  links_format_goto_url($node->nid, $link['lid'], 'links_weblink');
    if (! $variables['page']) {
      $variables['node_url'] = $link_url;
    }
  }
}

/**
 * Implementation of hook_view
 */
function links_weblink_view(&$node, $teaser = FALSE, $page = FALSE) { 
  $node = node_prepare($node, $teaser); 
  $formatted_links = links_get_list('links_weblink', $node, $page, $teaser, TRUE);
  // We know the array can only have zero or one elements in this module.
  if ($page && variable_get('links_weblink_enable_list', 0) && isset($formatted_links[0])) {
    $node->content['weblink'] = array(
      '#value' => theme('links_weblink_append', $formatted_links[0]),
      '#weight' => -1,
    );
  }
  return $node;
}

/**
 * Apply markup to the appended weblink
 */
function theme_links_weblink_append($link) {
  $output = '<p><ul id="links_weblink_list"><li>' . l($link['title'], $link['href'], array('attributes'=>$link['attributes'])) . '</li></ul></p>';
  return $output;
}

/**
 * To use the links API, we sometimes need to populate the internal data
 * structure $node->links_weblink, which is an array of link-definition
 * arrays. In this case, the outer array always contains exactly one element
 * because we are interested only in the primary URL for the weblink. If
 * this site allows "related links" for weblink nodes, that's handled
 * by the links_related module, not here.
 */
function links_weblink_node_build(&$node, $url='') {
  if (empty($url)) {
    $url = links_normalize_url($node->links_weblink_url);
  } else {
    $url = links_normalize_url($url);
  }
  $node->links_weblink_url = $url;
  $link = array(
    'url'=>$url,
    'link_title'=>$node->title,
    'weight'=>0,
  );
  // Wrap $link as the [0] element of a trivial outer array.
  $node->links_weblink = array($link);
}

function links_weblink_access($op, $node) {
  global $user;
  switch($op) {
    case 'view':
      return $node->status && user_access('view weblinks');
    case 'update':
    case 'delete':
      return ($user->uid == $node->uid) && user_access('edit own weblinks');
    case 'create':
      return user_access('create weblinks');
  }
}

/**
 * Create the form for the node. It's similar to the form for links_related
 * but allows (and in fact requires) only one link. Note that it's possible
 * to enable the "weblink" node type for "related links" in addition to the
 * special link that is a requirement. The only difference is the $module
 * parameter when we save the link to the database.
 */
function links_weblink_form_alter($form_id, &$form) {
  $type = $form['type']['#value'];
  switch ($form_id) {
    case $type .'_node_form':
      // The actual node edit form. This allows the users to enter the
      // links_related into appropriate node types' edit screens.
      $node = $form['#node'];
      $link = $node->links_weblink;
      $link['url'] = links_normalize_url($link['url']);
    break;
  }
  return;
}

/**
 * Block display functions
 */
function links_weblink_block($op = "list", $delta = 0) {
  if ($op == "list") {
    return array(
      0 => array('info' => t("Top weblinks")),
      1 => array('info' => t("Latest weblinks")),
      2 => array('info' => t("Weblinks blogroll")),
    );
  }
  elseif ($op == 'view') {
    switch ($delta) {
      case 0:
        return array(
          'subject' => t("Top weblinks"),
          'content' => links_weblink_block_list('top')
        );
      case 1:
        return array(
          'subject' => t("Latest weblinks"),
          'content' => links_weblink_block_list('new')
        );
      case 2:
        return array(
          'subject' => t("Weblinks"),
          'content' => t('Not yet implemented.'),
        );
    }
  }
}

function links_weblink_block_list($type = 'top') {
  $orderby = ($type == 'new') ?  'n.created' : 'ln.clicks';
  return node_title_list(db_query_range(db_rewrite_sql("SELECT n.nid, n.title, l.url, ln.clicks FROM {node} n INNER JOIN {links_node} ln on n.nid = ln.nid INNER JOIN {links} l ON ln.lid = l.lid WHERE n.type = 'weblink' AND ln.module='links_weblink' AND n.status = 1 AND n.moderate = 0 ORDER by $orderby DESC"),0, 10));
}

/**
 * Filter handling code
 */
function links_weblink_filter($op, $delta = 0, $format = -1, $text = "") {
  switch ($op) {
    case 'list':
      return array(0 => t("Weblink filter"));
    case 'description':
      return t("Filter for weblink tokens,  [weblink:node_id|text] or [weblink:node_id/link_id] or [weblink:http://weblink.example.com/]. If there is more than one link for the specified node_id, the first one will be used unless link_id is specified.");
    case 'process':
      return _links_weblink_filter_process($text);
    default:      return $text;
  }
}

function _links_weblink_filter_process($text) {

  // This section handles [weblink:$nid], [weblink:$nid/$lid], and the variants of these
  // with the optional "|$text" title parameter.

  $match = array();
  preg_match_all("#\[weblink:(\d+)(?:/(\d+))?(?:\|([^\|\]]*))?\]#i", $text, $match, PREG_SET_ORDER);
  foreach ($match as $m) {
    $found = $m[0];
    $nid   = $m[1];
    $lid   = $m[2];
    $title = $m[3];
    $url = links_format_goto_url($nid, $lid);
    if (empty($title)) {
      $links = links_load_links_for_node($nid, '', $lid, TRUE);
      $title = $links[0]['link_title'];
      if (empty($title)) {
        $title = t('(Link not found)');
      }
    }
    $target = links_get_goto_target();
    $attribs = empty($target) ? array() : array('target'=>links_get_goto_target());
    $replacement = l($title,$url,$attribs);
    $text = str_replace($found, $replacement, $text);
  }

  // This section handles [weblink:$url] and [weblink:$url|$text] variants

  $patterns = array();
  // Finds links with a protocol spec (adapted from urlfilter.module)
  $pattern = "!\[weblink:([A-Za-z]+://[a-zA-Z0-9@:%_~#?&=.,/;-]*)(?:\|([^\]]+))?]!i";
  $match = array();
  preg_match_all($pattern, $text, $match, PREG_SET_ORDER);
  foreach ($match as $m) {
    $found = $m[0];
    $url   = $m[1];
    $title = $m[2];
    $link  = links_get_link($url);
    $lid   = is_array($link) ? intval($link['lid']) : 0;
    if (empty($title)) {
      $title = links_suggest_link_title($url);
    }
    if ($lid) {
      $url = links_format_goto_url(0, $lid);
    }
    $target = links_get_goto_target();
    $attribs = empty($target) ? array() : array('target'=>links_get_goto_target());
    $replacement = l($title,$url,$attribs);
    $text = str_replace($found, $replacement, $text);
  }

  return $text;
}

function links_weblink_filter_tips($delta, $format, $long = false) {
  if ($long) {
    return t("You may create links to items stored in our weblink registry using a special syntax. The weblink codes will be replaced by a links to visit the real websites. Syntax: <code>[weblink:node_id]</code> (to use the first link for that node), <code>[weblink:node_id/link_id]</code> (to use a specific link for that node) or <code>[weblink:http://a.weblink.example.com/]</code> (to specify a raw URL).");
  }
  else {
    return t("You may link to webpages <a href=\"@long-tip\">through the weblinks registry</a>", array("@long-tip" => url("filter/tips", array('fragment' => 'weblink'))));
  }
}

/**
 * Implements hook_links_delete_link_reference to remove $lid from
 * the {links_node} table for records used by this module.
 *
 * TODO: In the case of weblinks, the nodes also need to be
 * deleted.
 */
function links_weblink_links_delete_link_reference($lid) {
  // First find out if we will need to delete any nodes
  $result = db_query("SELECT nid FROM {links_node} WHERE lid=%d AND module='links_weblink'", $lid);
  $nid_list = array();
  while ($row=db_fetch_array($result)) {
    $nid_list[] = $row['nid'];
  }
  db_query("DELETE FROM {links_node} WHERE lid=%d AND module='links_weblink'", $lid);
  if (db_error()) {
    watchdog("links","links delete references for link !lid failed for links_weblink module", array('!lid'=>$lid), WATCHDOG_ERROR);
  } else {
    watchdog("links","Deleted references for link !lid for links_weblink module", array('!lid'=>$lid), WATCHDOG_INFO);
    if (count($nid_list)) {
      watchdog("links","Deletion of link !lid requires deletion of nodes !nodes by links_weblink module, because these weblinks will no longer be valid.", array('!lid'=>$lid, '!nodes'=>implode(', ', $nid_list)), WATCHDOG_INFO);
      foreach ($nid_list as $nid) {
        node_delete($nid);
      }
    }
  }
}
