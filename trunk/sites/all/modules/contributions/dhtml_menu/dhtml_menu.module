<?php
// $Id: dhtml_menu.module,v 1.29.2.9 2008/11/09 23:03:35 arancaytar Exp $

/**
 * @file dhtml_menu.module
 * Adds preprocessors to the menu theming functions
 * that will add dynamic expansion to their menus.
 */

/**
 * Effects enabled by default. This is an array and
 * must be unserialized to be used. Constants can not contain arrays.
 */
define('DHTML_MENU_DEFAULT', serialize(array('slide' => 'slide', 'clone' => 'clone')));

/**
 * Implementation of hook_init().
 * Adds CSS, Javascript and settings to the page.
 */
function dhtml_menu_init() {
  drupal_add_css(drupal_get_path('module', 'dhtml_menu') .'/dhtml_menu.css');
  drupal_add_js(drupal_get_path('module', 'dhtml_menu') .'/dhtml_menu.js');
  $settings = variable_get('dhtml_menu_effects', unserialize(DHTML_MENU_DEFAULT));
  drupal_add_js(array('dhtmlMenu' => $settings), 'setting');
}

/** 
 * Implementation of hook_theme_registry_alter().
 * Replaces the theme functions for the menu_item functions
 */
function dhtml_menu_theme_registry_alter(&$theme_registry) {
  $theme_registry['menu_item']['function'] = 'dhtml_menu_theme_menu_item';
  $theme_registry['menu_item_link']['function'] = 'dhtml_menu_theme_menu_item_link';
}

/**
 * Preprocessor for menu_item_link.
 * Adds an ID attribute to menu links and helps the module
 * follow the recursion of menu_tree_output().
 */
function dhtml_menu_theme_menu_item_link($link) {
  static $disabled;
  if (!isset($disabled)) {
    $disabled = variable_get('dhtml_menu_disabled', array());
  }

  // Do not work on menu items that are either without menu name or mlid, or disabled.
  if (!isset($link['menu_name']) || !isset($link['mlid']) || !empty($disabled[$link['menu_name']])) {
    $link['dhtml_disabled'] = TRUE;
    return theme_menu_item_link($link);
  }

  $link['localized_options']['attributes']['id'] = 'dhtml_menu-' . _dhtml_menu_unique_id($link['mlid']);

  // Each link in series is another level of recursion. Add it to the stack.
  _dhtml_menu_stack($link);
  
  // Pass the altered variables to the normal menu themer.
  return theme_menu_item_link($link);
}

/**
 * Preprocessor for menu_item.
 * Checks whether the current item has children that
 * were not rendered, and loads and renders them.
 */
function dhtml_menu_theme_menu_item($link, $has_children, $menu = '', $in_active_trail = FALSE, $extra_class = NULL) {
  $settings =  variable_get('dhtml_menu_effects', unserialize(DHTML_MENU_DEFAULT));
  static $cookie;
  if (!isset($cookie)) {
    // Do not use this feature when keeping only one menu open at a time - the active path will always be open.
    $cookie = !empty($_COOKIE['dhtml_menu']) && empty($settings['siblings']) ? explode(',', $_COOKIE['dhtml_menu']) : array();
  }

  /* When theme('menu_item') is called, the menu tree below it has been
   * rendered already. Since we are done on this recursion level,
   * one element must be popped off the stack.
   */
  $stack = _dhtml_menu_stack();

  // Move to the last element in the stack (the current item).
  end($stack);
  
  // If this item should not have DHTML, then return to the "parent" function.
  $current = current($stack);
  if (!empty($current['dhtml_disabled'])) {
    $extra_class .= ' no-dhtml ';
    return theme_menu_item($link, $has_children, $menu, $in_active_trail, $extra_class);
  }
  
  // If there are children, but they were not loaded...
  if ($has_children && !$menu) {
    // Load the tree below the current position.
    $tree = _dhtml_menu_subtree($stack);

    // Render it...
    $menu = menu_tree_output($tree);
    if (!$menu) $has_children = FALSE; // Sanitize tree. If we found no children, the item has none.
  }

  // If the current item can expand, and is neither saved as open nor in the active trail, close it.
  if ($menu && !($in_active_trail || in_array(substr(key($stack), 5), $cookie))) {
    $extra_class .= ' collapsed start-collapsed ';
  }

  return theme_menu_item($link, $has_children, $menu, $in_active_trail, $extra_class);
}

/**
 * Helper function for storing recursion levels.
 *
 * @param $link
 *   If a menu item link is passed, it will be appended to the stack.
 *   If none is given, the stack will be returned and popped by one.
 *
 * @return
 *   The stack, if no parameter is given.
 */
function _dhtml_menu_stack($link = FALSE) {
  static $stack = array();
  if ($link) {
    $stack[$link['localized_options']['attributes']['id']] = $link;
  }
  else {
    $copy = $stack;
    array_pop($stack);
    return $copy;
  }
}

/**
 * Traverses the menu tree and returns the sub-tree of the item
 * indicated by the parameter.
 *
 * @param $stack
 *   An array of menu item links that are nested in each other in the tree.
 *
 * @return
 *   The items below the lowest item in the stack.
 */
function _dhtml_menu_subtree($stack) {
  static $index = array();
  static $indexed = array();

  reset($stack);
  $start = current($stack);

  // This looks expensive, but menu_tree_all_data uses static caching.
  $tree = menu_tree_all_data($start['menu_name']);

  if (!isset($indexed[$start['menu_name']])) {
    $index += _dhtml_menu_index($tree);
    $indexed[$start['menu_name']] = TRUE;
  }

  // Traverse the tree.
  foreach ($stack as $item) {
    $key = $index[$item['mlid']];
    if (!isset($tree[$key])) {
      $tree = $tree[key($tree)]['below'];
      if (!isset($tree[$key])) return array();
    }
    $tree = $tree[$key]['below'];
  }
  return $tree;
}

/**
 * Indexes the menu tree by mlid. This is needed to identify the items
 * without relying on titles. This function is recursive.
 *
 * @param $tree
 *   A tree of menu items such as the return value of menu_tree_all_data()
 *
 * @return
 *   An array associating mlid values with the internal keys of the menu tree.
 */
function _dhtml_menu_index($tree) {
  $index = array();
  foreach ($tree as $key => $item) {
    $index[$item['link']['mlid']] = $key;
    if (!empty($item['below'])) {
      $index += _dhtml_menu_index($item['below']);
    }
  }
  return $index;
}

/**
 * Implementation of hook_menu().
 * Adds a settings page.
 */
function dhtml_menu_menu() {
  $menu['admin/settings/dhtml_menu'] = array(
    'title' => 'DHTML Menu',
    'description' => 'Configure the effects of DHTML Menu',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dhtml_menu_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'dhtml_menu.admin.inc',
  );
  return $menu;
}

/**
 * Implementation of hook_help().
 */
function dhtml_menu_help($path) {
  switch ($path) {
    case 'admin/settings/dhtml_menu':
      return t('<em>DHTML Menu</em> adds dynamic functionality to the menus of your site. Ordinarily, reaching the child elements below an item requires you to visit its page. With DHTML Menu, clicking on an item with child elements will expand it without leaving the page, saving time. You can reach the actual page of such an item either by double-clicking on it or visiting the small extra link that will be shown right below it when expanded.');
  }
}

/**
 * Keeps track of ID attributes and adds a suffix to make it unique-when necessary.
 */
function _dhtml_menu_unique_id($id) {
  static $ids = array();
  if (!isset($ids[$id])) {
    $ids[$id] = 1;
    return $id;
  }
  else {
    return $id . '-' . $ids[$id]++;
  }
}
